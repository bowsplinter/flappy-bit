module mojo_top (
    input clk,              // 50MHz clock
    input rst_n,            // reset button (active low)
    output led [8],         // 8 user controllable LEDs
    input cclk,             // configuration clock, AVR ready when high
    output spi_miso,        // AVR SPI MISO
    input spi_ss,           // AVR SPI Slave Select
    input spi_mosi,         // AVR SPI MOSI
    input spi_sck,          // AVR SPI Clock
    output spi_channel [4], // AVR general purpose pins (used by default to select ADC channel)
    input avr_tx,           // AVR TX (FPGA RX)
    output avr_rx,          // AVR RX (FPGA TX)
    input avr_rx_busy,      // AVR RX buffer full
    output bird[5],
    output redbounds[8],
    output segscore[8],
    output selscore[4],
    output segmaxscore[8],
    output selmaxscore[4],
    output countdown[4],
    input inputbutton
  ) {
  
  sig rst;                  // reset signal
  
  .clk(clk) {
    // The reset conditioner is used to synchronize the reset signal to the FPGA
    // clock. This ensures the entire FPGA comes out of reset at the same time.
    reset_conditioner reset_cond;
    game game;
    seven_seg segmentscore;
    seven_seg segmentmaxscore;
  }
  
  always {
    reset_cond.in = ~rst_n; // input raw inverted reset signal
    rst = reset_cond.out;   // conditioned reset
    
    led = 8h00;             // turn LEDs off
    spi_miso = bz;          // not using SPI
    spi_channel = bzzzz;    // not using flags
    avr_rx = bz;            // not using serial port
    
    game.rst = rst;
    game.io_button = inputbutton;
    redbounds = game.bounds;
    bird = game.bird;
    led = game.debug4;
    
    segmentscore.rst = rst;
    segmentmaxscore.rst = rst;
    segmentscore.score = game.outscore;
    segmentmaxscore.score = game.outmaxscore;
    segscore = segmentscore.seg;
    selscore = segmentscore.sel;
    segmaxscore = segmentmaxscore.seg;
    selmaxscore = segmentmaxscore.sel;
    
    countdown = game.countdown;
    
    
    // score is in binary ? convert to decimal
    // build array based on decimal 
  }
}